C51 COMPILER V9.56.0.0   MAIN                                                              08/01/2024 21:52:21 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Keil_c51v956\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Device;.\System) DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "System.h"
   2          u8 KBD_Time;
   3          u8 Key_Value;
   4          u8 Display = 0;
   5          u8 second; u8 minute; u8 hour;
   6          u8 alarm_second =0; u8 alarm_minute = 0; u8 alarm_hour = 0;
   7          u8 count_seven,count_six,count_five,count_four;
   8          u8 save_hour,save_minute,save_second; 
   9          u8 seven_next,six_next;
  10          void Timer2_Init(void)          //1毫秒@12.000MHz
  11          {
  12   1              AUXR &= 0xFB;                   //定时器时钟12T模式
  13   1              T2L = 0x18;                             //设置定时初始值
  14   1              T2H = 0xFC;                             //设置定时初始值
  15   1              AUXR |= 0x10;                   //定时器2开始计时
  16   1              IE2 |= 0x04;
  17   1              EA =  1;
  18   1      }
  19          
  20          //温度读取
  21          u32 temperature;
  22          u8 temperature_time;
  23          void Read_Temperature(){
  24   1              if(temperature_time >= 100){
  25   2                      float a;        
  26   2                      a = Read_Temp();
  27   2                      temperature = a*10000;
  28   2                      temperature_time = 0;
  29   2              }
  30   1      }
  31          
  32          
  33          //时钟读取
  34          void Read_Clock(){
  35   1              second = BCDToDec (Read_Ds1302_Byte ( 0x81));
  36   1              minute = BCDToDec (Read_Ds1302_Byte ( 0x83));
  37   1              hour = BCDToDec (Read_Ds1302_Byte ( 0x85));
  38   1      }
  39          
  40          //闹钟警告
  41          u8 alarm_time_interval;           
  42          u16 alarm_time_total;
  43          bit alarm_flag;
  44          bit alarm_twinkling_flag;
  45          void Alarm_Warning(){
  46   1              if(second==0){
  47   2                      alarm_flag=1;
  48   2                      P2=0Xa0;P0=0x50;P2=0;
  49   2              }else{P2=0Xa0;P0=0x00;P2=0;}
  50   1              
  51   1      //      if(alarm_flag==1){
  52   1      //                      if(alarm_time_interval>=200){
  53   1      //                      alarm_twinkling_flag =~ alarm_twinkling_flag;
  54   1      //                      alarm_time_interval=0;
C51 COMPILER V9.56.0.0   MAIN                                                              08/01/2024 21:52:21 PAGE 2   

  55   1      //                      } 
  56   1      //                      if(alarm_twinkling_flag==0){
  57   1      //                              P2=0X80;P0=~0X01;P2=0;
  58   1      //                      }
  59   1      //                      if(alarm_twinkling_flag==1){
  60   1      //                              P2=0X80;P0=0XFF;P2=0;
  61   1      //                      }
  62   1      //      }
  63   1      //      
  64   1      //      if(alarm_time_total>=5000){
  65   1      //              alarm_flag=0;
  66   1      //              P2=0X80;P0=0xff;P2=0;
  67   1      //              alarm_time_total=0;
  68   1      //      }
  69   1      
  70   1      }
  71          
  72          bit twinkling_flag;
  73          bit DisplayOne_First;
  74          u16 twinkling_time;
  75          void SMG_Process(){
  76   1              if(Display == 0){         //时钟
  77   2                      amg_buf[0] = smg_code[hour/10];
  78   2                      amg_buf[1] = smg_code[hour%10];
  79   2                      amg_buf[2] = 0x40;
  80   2                      amg_buf[3] = smg_code[minute/10];
  81   2                      amg_buf[4] = smg_code[minute%10];
  82   2                      amg_buf[5] = 0x40;
  83   2                      amg_buf[6] = smg_code[second/10];
  84   2                      amg_buf[7] = smg_code[second%10];
  85   2              }
  86   1              if(Display == 1){               //时钟设置
  87   2                      if(count_seven==1){
  88   3                              if(twinkling_time>=1000){twinkling_flag=~twinkling_flag;twinkling_time=0;}
  89   3                              if(twinkling_flag==0){
  90   4                                      amg_buf[0] = smg_code[save_hour/10];
  91   4                                      amg_buf[1] = smg_code[save_hour%10];
  92   4                              }
  93   3                              if(twinkling_flag==1){
  94   4                                      amg_buf[0] = 0x00;
  95   4                                      amg_buf[1] = 0x00;
  96   4                              }
  97   3                      }else{                                                                          //闪烁信号结束数码管要显
             -示
  98   3                              amg_buf[0] = smg_code[save_hour/10];
  99   3                              amg_buf[1] = smg_code[save_hour%10];
 100   3                      }
 101   2                      amg_buf[2] = 0x40;
 102   2                      if(count_seven==2){
 103   3                              if(twinkling_time>=1000){twinkling_flag=~twinkling_flag;twinkling_time=0;}
 104   3                              if(twinkling_flag==0){
 105   4                                      amg_buf[3] = smg_code[save_minute/10];
 106   4                                      amg_buf[4] = smg_code[save_minute%10];
 107   4                              }
 108   3                              if(twinkling_flag==1){
 109   4                                      amg_buf[3] = 0x00;
 110   4                                      amg_buf[4] = 0x00;
 111   4                              }
 112   3                      }else{                                                                        
 113   3                              amg_buf[3] = smg_code[save_minute/10];
 114   3                              amg_buf[4] = smg_code[save_minute%10];
 115   3                      }
C51 COMPILER V9.56.0.0   MAIN                                                              08/01/2024 21:52:21 PAGE 3   

 116   2                      amg_buf[5] = 0x40;
 117   2                              if(count_seven==3){
 118   3                              if(twinkling_time>=1000){twinkling_flag=~twinkling_flag;twinkling_time=0;}
 119   3                              if(twinkling_flag==0){
 120   4                                      amg_buf[6] = smg_code[save_second/10];
 121   4                                      amg_buf[7] = smg_code[save_second%10];
 122   4                              }
 123   3                              if(twinkling_flag==1){
 124   4                                      amg_buf[6] = 0x00;
 125   4                                      amg_buf[7] = 0x00;
 126   4                              }
 127   3                      }else{                                                                          
 128   3                              amg_buf[6] = smg_code[save_second/10];
 129   3                              amg_buf[7] = smg_code[save_second%10];
 130   3                      }
 131   2              }
 132   1              
 133   1                      if(Display == 2){               //闹钟设置
 134   2                              if(count_six==1){
 135   3                              if(twinkling_time>=1000){twinkling_flag=~twinkling_flag;twinkling_time=0;}
 136   3                              if(twinkling_flag==0){
 137   4                                      amg_buf[0] = smg_code[alarm_hour/10];
 138   4                                      amg_buf[1] = smg_code[alarm_hour%10];
 139   4                              }
 140   3                              if(twinkling_flag==1){
 141   4                                      amg_buf[0] = 0x00;
 142   4                                      amg_buf[1] = 0x00;
 143   4                              }
 144   3                      }else{                                                                          //闪烁信号结束数码管要显
             -示
 145   3                              amg_buf[0] = smg_code[alarm_hour/10];
 146   3                              amg_buf[1] = smg_code[alarm_hour%10];
 147   3                      }
 148   2                      amg_buf[2] = 0x40;
 149   2                      if(count_six==2){
 150   3                              if(twinkling_time>=1000){twinkling_flag=~twinkling_flag;twinkling_time=0;}
 151   3                              if(twinkling_flag==0){
 152   4                                      amg_buf[3] = smg_code[alarm_minute/10];
 153   4                                      amg_buf[4] = smg_code[alarm_minute%10];
 154   4                              }
 155   3                              if(twinkling_flag==1){
 156   4                                      amg_buf[3] = 0x00;
 157   4                                      amg_buf[4] = 0x00;
 158   4                              }
 159   3                      }else{                                                                        
 160   3                              amg_buf[3] = smg_code[alarm_minute/10];
 161   3                              amg_buf[4] = smg_code[alarm_minute%10];
 162   3                      }
 163   2                      amg_buf[5] = 0x40;
 164   2                              if(count_six==3){
 165   3                              if(twinkling_time>=1000){twinkling_flag=~twinkling_flag;twinkling_time=0;}
 166   3                              if(twinkling_flag==0){
 167   4                                      amg_buf[6] = smg_code[alarm_second/10];
 168   4                                      amg_buf[7] = smg_code[alarm_second%10];
 169   4                              }
 170   3                              if(twinkling_flag==1){
 171   4                                      amg_buf[6] = 0x00;
 172   4                                      amg_buf[7] = 0x00;
 173   4                              }
 174   3                      }else{                                                                          
 175   3                              amg_buf[6] = smg_code[alarm_second/10];
 176   3                              amg_buf[7] = smg_code[alarm_second%10];
C51 COMPILER V9.56.0.0   MAIN                                                              08/01/2024 21:52:21 PAGE 4   

 177   3                      }
 178   2              }
 179   1              if(Display == 3){                //温度
 180   2                      amg_buf[0] = 0x00;
 181   2                      amg_buf[1] = 0x00;
 182   2                      amg_buf[2] = 0x00;
 183   2                      amg_buf[3] = 0x00;
 184   2                      amg_buf[4] = 0x00;
 185   2                      amg_buf[5] = smg_code[temperature/100000];
 186   2                      amg_buf[6] = smg_code[temperature/10000%10];
 187   2                      amg_buf[7] = 0x39;
 188   2              }
 189   1      
 190   1      
 191   1      }
 192          
 193          
 194          
 195          void main(){
 196   1              Timer2_Init();
 197   1              System_Init();            //设备初始化
 198   1              hour=23; minute=59;second=55;
 199   1              alarm_hour=0;alarm_minute=0;alarm_second=0;
 200   1              Clock_Set(hour,minute,second);//时钟初始化
 201   1              
 202   1              while(1){
 203   2              SMG_Process();
 204   2              Read_Clock();                                           //时钟读取
 205   2              Read_Temperature();          //温度读取
 206   2              
 207   2                      if(KBD_Time >= 10){
 208   3                      KBD_Read_ThreeLine();
 209   3                      KBD_Time = 0;
 210   3                      if(Trg == 0x81){                   //时钟设置
 211   4                              Key_Value = 7;
 212   4                              count_seven++;
 213   4                              seven_next++;
 214   4                              if(count_seven==1){                               //从时钟模式第一次进来要保存时间，防止时间走失
 215   5                                      save_hour=hour; save_minute=minute;save_second=second;
 216   5                                      Display=1;
 217   5                                      seven_next=1;
 218   5      
 219   5                              }       
 220   4                              if(count_seven==2){seven_next=2;}             //save_hour=select_time是为了保存第一个更改后的数据
 221   4                              if(count_seven==3){seven_next=3;}
 222   4                              if(count_seven==4){
 223   5                              count_seven=0;
 224   5                              Display=0;
 225   5                              Clock_Set(save_hour,save_minute,save_second);
 226   5                              seven_next=0;
 227   5                              }
 228   4                              
 229   4                      }
 230   3                      if(Trg == 0x82){                                //6
 231   4                              count_six++;
 232   4                              six_next++;
 233   4                              if(count_six==1){                               //从时钟模式第一次进来要保存时间，防止时间走失
 234   5                                      Display=2;
 235   5                                      six_next=1;
 236   5                              }       
 237   4                              if(count_six==2){six_next=2;}             //save_hour=select_time是为了保存第一个更改后的数据
 238   4                              if(count_six==3){six_next=3;}
C51 COMPILER V9.56.0.0   MAIN                                                              08/01/2024 21:52:21 PAGE 5   

 239   4                              if(count_six==4){
 240   5                              count_six=0;
 241   5                              Display=0;
 242   5                              six_next=0;
 243   5                              }
 244   4                      }                            
 245   3                      if(Trg == 0x84){                                                                                                                                        //5
 246   4                              Key_Value = 5;
 247   4                              //时钟模式的按键加
 248   4                              if(seven_next==1){
 249   5                                      if(save_hour<23) save_hour++;
 250   5                              }
 251   4                              if(seven_next==2){
 252   5                                      if(save_minute<59) save_minute++;
 253   5                              } 
 254   4                              if(seven_next==3){
 255   5                                      if(save_second<59) save_second++;
 256   5                              }
 257   4                              //闹钟模式的按键加
 258   4                              if(six_next==1){
 259   5                              if(alarm_hour<23) alarm_hour++;
 260   5                              }
 261   4                              if(six_next==2){
 262   5                                      if(alarm_minute<59) alarm_minute++;
 263   5                              } 
 264   4                              if(six_next==3){
 265   5                                      if(alarm_second<59) alarm_second++;
 266   5                              }
 267   4                      }                                                       
 268   3                      if(Trg == 0x88){                                                                                                                                          //4
 269   4                              Key_Value = 6;
 270   4                              //时钟模式的按键减
 271   4                              if(seven_next==1){
 272   5                                      if(save_hour>0) save_hour--;
 273   5                              }
 274   4                              if(seven_next>=0){
 275   5                                      if(save_minute>0) save_minute--;
 276   5                              } 
 277   4                              if(seven_next>=0){
 278   5                                      if(save_second>0) save_second--;
 279   5                              }
 280   4                              //闹钟模式的按键加
 281   4                              if(six_next==1){
 282   5                              if(alarm_hour>0) alarm_hour--;
 283   5                              }
 284   4                              if(six_next==2){
 285   5                                      if(alarm_minute>0) alarm_minute--;
 286   5                              } 
 287   4                              if(six_next==3){
 288   5                                      if(alarm_second>0) alarm_second--;
 289   5                              }                       
 290   4                      }
 291   3                      //按键4松开放下显示不一样的数据
 292   3                      if(Trg==0 & Cont==0){        
 293   4                              if(Display==3){
 294   5                                      Display = 0;
 295   5                                      }
 296   4                      }
 297   3                      if(Trg!=0){                     //按下任意键闹钟的警告下的LED1会关闭
 298   4                      alarm_flag=0;
 299   4                      P2=0X80;P0=0xff;P2=0;
 300   4                      }
C51 COMPILER V9.56.0.0   MAIN                                                              08/01/2024 21:52:21 PAGE 6   

 301   3                      Alarm_Warning();
 302   3                      
 303   3                      }
 304   2              
 305   2      
 306   2              }
 307   1      
 308   1      }
 309          
 310          
 311          
 312          
 313          void Timer2_ISR() interrupt 12{
 314   1                      SMG_Display();
 315   1                      KBD_Time++;
 316   1                      temperature_time++;
 317   1                      twinkling_time++;
 318   1                      alarm_time_interval++;
 319   1                      alarm_time_total++;
 320   1      //                      //闹钟警告          指示灯L1
 321   1      //              Alarm_Warning();
 322   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1425    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

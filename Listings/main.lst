C51 COMPILER V9.56.0.0   MAIN                                                              08/07/2024 11:25:55 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Keil_c51v956\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Device;.\System) DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "System.h"
   2          bit Display=1;
   3          u8 key_time; u8 key_io;
   4          u16 adc_val;u16 adc_time;  //--------------????Œ™ ≤√¥”√u16≤ªø…“‘{µΩµ⁄30√Î ±–˝◊™µÁŒª∆˜√ª”√}°™°™°™°™°™°™°™°™
             -ADC_Read_Process()
   5          u8 dac_val=2; bit dac_flag; s16 dac_time;
   6          s16 ne555_time; u32 ne555_val;
   7          bit SMG_flag=0;
   8          
   9          sbit LED4 = P0^3;
  10          
  11          void Timer2_Init(void)          //1∫¡√Î@12.000MHz
  12          {
  13   1              AUXR |= 0x04;                   //∂® ±∆˜ ±÷”1Tƒ£ Ω
  14   1              T2L = 0x20;                             //…Ë÷√∂® ±≥ı º÷µ
  15   1              T2H = 0xD1;                             //…Ë÷√∂® ±≥ı º÷µ
  16   1              AUXR |= 0x10;                   //∂® ±∆˜2ø™ ºº∆ ±
  17   1              IE2 |= 0x04;
  18   1              EA = 1;
  19   1      }
  20          
  21          void Counter0_Init(){                 //∂® ±∆˜0º∆ ˝∆˜
  22   1              TMOD |= 0x05;
  23   1              TH0 = 0x00;
  24   1               TL1 = 0x00;
  25   1               TR0 = 1;
  26   1      }
  27          
  28          
  29          //ADC∂¡»°
  30          void ADC_Read_Process(){
  31   1              if(adc_time>=10){       
  32   2                      adc_val=Read_ADC()*100/51;   //»Áπ˚ƒ„”√“ª∏ˆ’˚ ˝≥˝“‘¡Ì“ª∏ˆ’˚ ˝£¨Ω·π˚Ω´ «’˚ ˝≤ø∑÷£¨∂¯–° ˝≤ø∑÷Ω´±ª…·∆˙À˘“‘“
             -™œ»*100
  33   2              }
  34   1      }
  35          
  36          
  37          //DAC ‰≥ˆ
  38          void DAC_Write_Process(){
  39   1              if(dac_time>=100){
  40   2                      if(dac_flag==1){
  41   3                              dac_val = adc_val;
  42   3                              //Device_Ctrl(0x80,~0x01);
  43   3                      }
  44   2                      else{
  45   3                              dac_val=2;
  46   3                              //Device_Ctrl(0x80,0xff);
  47   3                      }
  48   2                      Write_DAC(dac_val);
  49   2              }
  50   1      }
  51          
  52          //NE555
C51 COMPILER V9.56.0.0   MAIN                                                              08/07/2024 11:25:55 PAGE 2   

  53          void NE555_Process(){
  54   1              if(ne555_time>=1000){
  55   2                      ne555_time=0;
  56   2                      ne555_val = (TH0<<8)|TL0;
  57   2                      TL0=0;
  58   2                      TH0=0;
  59   2              }
  60   1      
  61   1      }
  62          
  63          
  64          
  65          
  66          u8 led_ctrl=0xff;
  67          //LED∫Ø ˝
  68          void LED_Process(){
  69   1              //if((150<=dac_val&&dac_val<250)  ||  dac_val>=350){P2=0x80;P03=0;P2=0x00;}         //‘⁄ƒ„µƒ¥˙¬Î÷–£¨Ω´ P2
             - …Ë÷√Œ™ 0x80 »ª∫Û—∏ÀŸ…Ë÷√Œ™ 0x00 ø…ƒ‹ª·µº÷¬À˘”–¡¨Ω”µΩ P2 µƒµ∆∂Ã‘›µÿ±ªº§ªÓ°£’‚ «“ÚŒ™µ± P2 ±ª…Ë÷√Œ™ 0x80  ±£¨P2 µƒµ⁄ 7 Œª£
             -®º¥ P2.7£©±ª÷√∏ﬂµÁ∆Ω£¨ø…ƒ‹ª·À≤º‰º§ªÓ”Î P2 ¡¨Ω”µƒÀ˘”–µ∆°£»ª∫Û—∏ÀŸΩ´ P2 …Ë÷√Œ™ 0x00£¨ª·»√’‚–©µ∆∂Ã ±º‰ƒ⁄¥¶”⁄µ„¡¡◊¥Ã¨£¨µ´”…”
             -⁄ ±º‰º´∂Ã£¨À˘“‘¡¡∂»≤ª∏ﬂ°£
  70   1              //if(dac_val<150  ||  (250<=dac_val && dac_val<350)){P2=0x80;P03=1;P2=0x00;} 
  71   1              
  72   1              if((150<=adc_val&&adc_val<250)  ||  adc_val>=350){led_ctrl&=~0x04;}  
  73   1              else if(adc_val<150  ||  (250<=adc_val && adc_val<350)){led_ctrl|=0x04;} 
  74   1              
  75   1              if((1000<=ne555_val&&dac_val<5000)   ||   10000<=ne555_val){led_ctrl&=~0x08;}
  76   1              else if(ne555_val<1000   ||   (5000<=ne555_val&&dac_val<10000)){led_ctrl|=0x08;}
  77   1      
  78   1      //      if(ne555_val<1000) led_ctrl |= 0x08;
  79   1      //      else if(ne555_val<5000) led_ctrl &= ~0x08;
  80   1      //      else if(ne555_val<10000) led_ctrl |= 0x08;
  81   1      //      else led_ctrl &= ~0x08;
  82   1      
  83   1      
  84   1      Device_Ctrl(0x80,led_ctrl);
  85   1      }
  86          
  87          
  88          
  89          
  90          
  91          // ˝¬Îπ‹≤Ÿ◊˜∫Ø ˝
  92          void SMG_Process(){
  93   1              if(SMG_flag==0){
  94   2                      if(Display == 0){
  95   3                      amg_buf[0] =0x71;
  96   3                      amg_buf[1] =0x00;
  97   3                      amg_buf[2] = 0x00;
  98   3                      amg_buf[3] = smg_code[ne555_val/10000];
  99   3                      amg_buf[4] = smg_code[ne555_val/1000%10];
 100   3                      amg_buf[5] = smg_code[ne555_val/100%10];
 101   3                      amg_buf[6] = smg_code[ne555_val/10%10];
 102   3                      amg_buf[7] = smg_code[ne555_val%10];
 103   3                      }               
 104   2                      if(Display == 1){
 105   3                      amg_buf[0] =0x3e;
 106   3                      amg_buf[1] =0x00;
 107   3                      amg_buf[2] = 0x00;
 108   3                      amg_buf[3] = smg_code[dac_flag];
 109   3                      amg_buf[4] = 0x00;
 110   3                      amg_buf[5] = smg_code[adc_val/100] | 0x80;
 111   3                      amg_buf[6] = smg_code[adc_val/10%10];
C51 COMPILER V9.56.0.0   MAIN                                                              08/07/2024 11:25:55 PAGE 3   

 112   3                      amg_buf[7] = smg_code[adc_val%10];
 113   3                      }
 114   2              }
 115   1              else{
 116   2                      amg_buf[0] = 0x00;
 117   2                      amg_buf[1] =0x00;
 118   2                      amg_buf[2] = 0x00;
 119   2                      amg_buf[3] = 0x00;
 120   2                      amg_buf[4] = 0x00;
 121   2                      amg_buf[5] = 0x00;
 122   2                      amg_buf[6] = 0x00;
 123   2                      amg_buf[7] = 0x00;
 124   2              }
 125   1      
 126   1      }
 127          
 128          
 129          void main(){
 130   1              System_Init();
 131   1              Timer2_Init();
 132   1              Counter0_Init();
 133   1              
 134   1              while(1){
 135   2                      SMG_Process();
 136   2                      ADC_Read_Process();  
 137   2                      DAC_Write_Process();
 138   2                      NE555_Process();
 139   2                      
 140   2                      if(key_time>=5){
 141   3                              key_time = 0;
 142   3                              KBD_ThreeLine();
 143   3                              if(Trg==0x81) {SMG_flag=~SMG_flag;}      //s7
 144   3                              if(Trg==0x82) {}                                              //s6
 145   3                              if(Trg==0x84) {dac_flag=~dac_flag;}         //s5
 146   3                              if(Trg==0x88) {Display=~Display;}            //s4
 147   3                      }
 148   2                      
 149   2                      
 150   2                      
 151   2                      
 152   2                      
 153   2                      
 154   2                      
 155   2                      
 156   2                      
 157   2              }
 158   1      
 159   1      }
 160          
 161          
 162          
 163          void Timer2_ISR() interrupt 12{
 164   1              SMG_Display();
 165   1              key_time++;
 166   1              ne555_time++;
 167   1              adc_time++;
 168   1              dac_time++;
 169   1              LED_Process();
 170   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.56.0.0   MAIN                                                              08/07/2024 11:25:55 PAGE 4   

   CODE SIZE        =    743    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
